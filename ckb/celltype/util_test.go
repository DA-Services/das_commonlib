package celltype

import (
	"encoding/binary"
	"encoding/hex"
	"math/big"
	"testing"
	"time"
)

/**
 * Copyright (C), 2019-2020
 * FileName: util_test
 * Author:   LinGuanHong
 * Date:     2020/12/27 12:09 下午
 * Description:
 */

func Test_ParseTxWitnessToDasWitnessObj_ConfigCellType(t *testing.T) {
	wBytes, err := hex.DecodeString("646173080000003b0400003000000034000000380000003c000000e8020000140400001504000016040000170400001b0400001f0400003c00000080510100e8030000ac020000100000004c000000bf0000003c00000010000000140000001500000000000000012700000010000000180000002000000004000000f09f988204000000f09f918d03000000e29ca87300000010000000140000001500000001000000015e0000002c00000031000000360000003b00000040000000450000004a0000004f00000054000000590000000100000030010000003101000000320100000033010000003401000000350100000036010000003701000000380100000039ed0100001000000014000000150000000200000000d8010000d4000000d9000000de000000e3000000e8000000ed000000f2000000f7000000fc00000001010000060100000b01000010010000150100001a0100001f01000024010000290100002e01000033010000380100003d01000042010000470100004c01000051010000560100005b01000060010000650100006a0100006f01000074010000790100007e01000083010000880100008d01000092010000970100009c010000a1010000a6010000ab010000b0010000b5010000ba010000bf010000c4010000c9010000ce010000d3010000010000006101000000620100000063010000006401000000650100000066010000006701000000680100000069010000006a010000006b010000006c010000006d010000006e010000006f0100000070010000007101000000720100000073010000007401000000750100000076010000007701000000780100000079010000007a010000004101000000420100000043010000004401000000450100000046010000004701000000480100000049010000004a010000004b010000004c010000004d010000004e010000004f0100000050010000005101000000520100000053010000005401000000550100000056010000005701000000580100000059010000005a2c01000024000000450000006600000087000000a8000000c9000000ea0000000b0100002100000010000000110000001900000001001bb70000000000804f1200000000002100000010000000110000001900000002c0d8a70000000000e0c81000000000002100000010000000110000001900000003809698000000000040420f000000000021000000100000001100000019000000044054890000000000a0bb0d0000000000210000001000000011000000190000000500127a000000000000350c00000000002100000010000000110000001900000006c0cf6a000000000060ae0a00000000002100000010000000110000001900000007808d5b0000000000c0270900000000002100000010000000110000001900000008404b4c000000000020a107000000000004020632000000320000001c000000100000001400000018000000e8030000e8030000401f0000")
	if err != nil {
		panic(err)
	}
	obj, err := ParseTxWitnessToDasWitnessObj(wBytes)
	if err != nil {
		panic(err)
	}
	t.Log(obj.WitnessObj.TableType)
	if configCellData, err := ConfigCellRegisterFromSlice(obj.MoleculeNewDataEntity.Entity().RawData(), false); err != nil {
		panic(err)
	} else {
		t.Log(MoleculeU32ToGo(configCellData.ApplyMinWaitingBlockNumber().RawData()))
	}
}

func Test_GoTimestampToMoleculeBytes(t *testing.T) {
	timeNowSec := time.Now().Unix()
	t.Log(timeNowSec)
	ret := GoTimeUnixToMoleculeBytes(timeNowSec)
	_mt := NewTimestampBuilder().Set(ret).Build()
	_rd := _mt.RawData()
	t.Log(byteToInt64(_rd))
	t.Log(new(big.Int).SetBytes(_rd).String())
}

func byteToInt64(bys []byte) int64 {
	return int64(binary.LittleEndian.Uint64(bys))
}
